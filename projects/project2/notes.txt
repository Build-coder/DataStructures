Here we go...

Your assignment is to implement a Splay tree
in which we can store the info about several books.

The info to store is the title, author, and text.
The text will be stored in an AVL tree. It means 
that every node in the Splay tree has an AVL tree.

The user will be able to access the text by
searching the Splay tree for a specific title. The
text of every book is stored as words in the AVL tree
The user is able to search the AVL tree and collect
some info about the text. The following presents some
examples of queries:

    - The number of occurrences of a word in a book
    - Check whether a word is commonly used by mult
      authors
    - etc 

You can add your own private variables and functions.
The current private function declarations are provided
as a backbone to help you

Node instance of -> 
WordTree instance of -> 
BNode instance of -> 
BookTree

The class BookTree constructs a Splay tree. 
The nodes in this tree are of type BNode
The key for a node is the title of a book 

wordTree - "BST (Binary Search Tree): Balanced" contains interface and implementation of class Node
bNode - turns each AVL tree into a node (I think)
bookTree - Splay tree

key value: the value the root node of the tree is holding OR maybe just the value in the node

Case                                          Balanceing operation
------------------------------------------------------------------------
Node's right child has greater height         Left rotation
and right child of right child has a 
greater height

aNode->right > aNode->left 
        &&
aNode->right->right > aNode->right->left
------------------------------------------------------------------------

Node's right child has greater height        Right rotation about Node's
and left child of right child has a          right child, left rotation 
greater height                               about aNode

aNode->right > aNode->left 
        &&
aNode->right->left > aNode->right->right
------------------------------------------------------------------------

Node's left child has greater height        Right rotation
and left child of left child has a 
greater height

aNode->left > aNode->right 
        &&
aNode->left->left > aNode->left->right
------------------------------------------------------------------------

Node's left child has greater height        Left rotation about node's
and right child of left child has a         left child, right rotation
greater height                              about node

aNode->left > aNode->right 
        &&
aNode->left->right > aNode->left->left

// 1.) right child has greater height
    //      and right child of right child
    //      has a greater height
    if (balance < 0 &&
    aNode->_right->_right > aNode->_right->_left){
        // left rotation
        leftRotation(aNode);

    // 2.) right child has greater height 
    //      and left child of right child
    //      has a greater height  
    } else if (balance < 0 &&
    aNode->_right->_left > aNode->_right->_right){
        // right rotation about node's right child
        // left rotation about node

        rightRotation(aNode->_right);
        leftRotation(aNode);

    // 3.) left child has greater height
    //      and left child of right child 
    //      has a greater height
    } else if (balance > 0 &&
    aNode->_right->_left > aNode->_right->_right){
        // right rotation
        rightRotation(aNode);
    
    // 4.) left child has greater height
    //      and right child of left child
    //      has a greater height
    } else if (balance > 0 &&
    aNode->_left->_left > aNode->_right->_right){
        // left rotation about left's child
        // right rotation about node
        leftRotation(aNode->_left);
        rightRotation(aNode);
    }